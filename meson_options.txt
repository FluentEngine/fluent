option('RENDERER_BACKEND_VULKAN', type: 'boolean', value : true)
option('RENDERER_BACKEND_D3D12', type: 'boolean', value : false)
option('BUILD_DOCUMENTATION', type : 'boolean', value : false, description : 'Create and install the HTML-based API documentation (requires Doxygen)')
option('D3D12MA_BUILD_SAMPLE', type : 'boolean', value : false, description : 'Build D3D12MemoryAllocator sample application')
option('SPDLOG_BUILD_ALL', type : 'boolean', value : false, description : 'Build all artifacts')
option('SPDLOG_BUILD_SHARED', type : 'boolean', value : false, description : 'Build shared library')
option('SPDLOG_ENABLE_PCH', type : 'boolean', value : false, description : 'Build static or shared library using precompiled header to speed up compilation time')
option('SPDLOG_BUILD_EXAMPLE', type : 'boolean', value : false, description : 'Build example')
option('SPDLOG_BUILD_EXAMPLE_HO', type : 'boolean', value : false, description : 'Build header only example')
option('SPDLOG_BUILD_TESTS', type : 'boolean', value : false, description : 'Build tests')
option('SPDLOG_BUILD_TESTS_HO', type : 'boolean', value : false, description : 'Build tests using the header only version')
option('SPDLOG_BUILD_BENCH', type : 'boolean', value : false, description : 'Build benchmarks (Requires https://github.com/google/benchmark.git to be installed)')
option('SPDLOG_SANITIZE_ADDRESS', type : 'boolean', value : false, description : 'Enable address sanitizer in tests')
option('SPDLOG_BUILD_WARNINGS', type : 'boolean', value : false, description : 'Enable compiler warnings')
option('SPDLOG_INSTALL', type : 'boolean', value : false, description : 'Generate the install target')
option('SPDLOG_USE_STD_FORMAT', type : 'boolean', value : false, description : 'Use std::format instead of fmt library. No compile-time format string checking.')
option('SPDLOG_FMT_EXTERNAL', type : 'boolean', value : false, description : 'Use external fmt library instead of bundled')
option('SPDLOG_FMT_EXTERNAL_HO', type : 'boolean', value : false, description : 'Use external fmt header-only library instead of bundled')
option('SPDLOG_NO_EXCEPTIONS', type : 'boolean', value : false, description : 'Compile with -fno-exceptions. Call abort() on any spdlog exceptions')
option('SPDLOG_WCHAR_SUPPORT', type : 'boolean', value : false, description : 'Support wchar api')
option('SPDLOG_WCHAR_FILENAMES', type : 'boolean', value : false, description : 'Support wchar filenames')
option('SPDLOG_CLOCK_COARSE', type : 'boolean', value : false, description : 'Use CLOCK_REALTIME_COARSE instead of the regular clock,')
option('SPDLOG_PREVENT_CHILD_FD', type : 'boolean', value : false, description : 'Prevent from child processes to inherit log file descriptors')
option('SPDLOG_NO_THREAD_ID', type : 'boolean', value : false, description : 'prevent spdlog from querying the thread id on each log call if thread id is not needed')
option('SPDLOG_NO_TLS', type : 'boolean', value : false, description : 'prevent spdlog from using thread local storage')
option('SPDLOG_NO_ATOMIC_LEVELS', type : 'boolean', value : false, description : 'prevent spdlog from using of std::atomic log levels (use only if your code never modifies log levels concurrently')
option('SPDLOG_DISABLE_DEFAULT_LOGGER', type : 'boolean', value : false, description : 'Disable default logger creation')
option('SPDLOG_TIDY', type : 'boolean', value : false, description : 'run clang-tidy')
option('GLM_QUIET', type : 'boolean', value : false, description : 'No CMake Message')
option('BUILD_SHARED_LIBS', type : 'boolean', value : true, description : 'Build shared library')
option('BUILD_STATIC_LIBS', type : 'boolean', value : true, description : 'Build static library')
option('GLM_TEST_ENABLE_CXX_98', type : 'boolean', value : false, description : 'Enable C++ 98')
option('GLM_TEST_ENABLE_CXX_11', type : 'boolean', value : false, description : 'Enable C++ 11')
option('GLM_TEST_ENABLE_CXX_14', type : 'boolean', value : false, description : 'Enable C++ 14')
option('GLM_TEST_ENABLE_CXX_17', type : 'boolean', value : false, description : 'Enable C++ 17')
option('GLM_TEST_ENABLE_CXX_20', type : 'boolean', value : false, description : 'Enable C++ 20')
option('GLM_TEST_ENABLE_LANG_EXTENSIONS', type : 'boolean', value : false, description : 'Enable language extensions')
option('GLM_DISABLE_AUTO_DETECTION', type : 'boolean', value : false, description : 'Enable language extensions')
option('GLM_TEST_ENABLE_FAST_MATH', type : 'boolean', value : false, description : 'Enable fast math optimizations')
option('GLM_TEST_ENABLE', type : 'boolean', value : true, description : 'Build unit tests')
option('GLM_TEST_ENABLE_SIMD_SSE2', type : 'boolean', value : false, description : 'Enable SSE2 optimizations')
option('GLM_TEST_ENABLE_SIMD_SSE3', type : 'boolean', value : false, description : 'Enable SSE3 optimizations')
option('GLM_TEST_ENABLE_SIMD_SSSE3', type : 'boolean', value : false, description : 'Enable SSSE3 optimizations')
option('GLM_TEST_ENABLE_SIMD_SSE4_1', type : 'boolean', value : false, description : 'Enable SSE 4.1 optimizations')
option('GLM_TEST_ENABLE_SIMD_SSE4_2', type : 'boolean', value : false, description : 'Enable SSE 4.2 optimizations')
option('GLM_TEST_ENABLE_SIMD_AVX', type : 'boolean', value : false, description : 'Enable AVX optimizations')
option('GLM_TEST_ENABLE_SIMD_AVX2', type : 'boolean', value : false, description : 'Enable AVX2 optimizations')
option('GLM_TEST_FORCE_PURE', type : 'boolean', value : false, description : 'Force \'pure\' instructions')
# imgui
option('dx9', type : 'feature', value : 'disabled')
option('dx10', type : 'feature', value : 'disabled')
option('dx11', type : 'feature', value : 'disabled')
option('dx12', type : 'feature', value : 'auto')
option('metal', type : 'feature', value : 'disabled')
option('opengl', type : 'feature', value : 'disabled')
option('sdl_renderer', type : 'feature', value : 'disabled')
option('vulkan', type : 'feature', value : 'auto')
option('webgpu', type : 'feature', value : 'disabled')

# platform backends
option('glfw', type : 'feature', value : 'disabled')
option('sdl2', type : 'feature', value : 'auto')
option('osx', type : 'feature', value : 'disabled')
option('win', type : 'feature', value : 'disabled')

# frameworks (renderer + platform)
option('allegro5', type : 'feature', value : 'auto')