#pragma once

#include "base/base.h"
#include "renderer_enums.h"
#include "renderer_enums_stringifier.h"

FT_INLINE const char*
ft_renderer_api_to_string( const enum ft_renderer_api type )
{
	switch ( type )
	{
	case FT_RENDERER_API_VULKAN: return "FT_RENDERER_API_VULKAN";
	case FT_RENDERER_API_D3D12: return "FT_RENDERER_API_D3D12";
	case FT_RENDERER_API_METAL: return "FT_RENDERER_API_METAL";
	}
	return "";
}

FT_INLINE const char*
ft_queue_type_to_string( const enum ft_queue_type type )
{
	switch ( type )
	{
	case FT_QUEUE_TYPE_GRAPHICS: return "FT_QUEUE_TYPE_GRAPHICS";
	case FT_QUEUE_TYPE_COMPUTE: return "FT_QUEUE_TYPE_COMPUTE";
	case FT_QUEUE_TYPE_TRANSFER: return "FT_QUEUE_TYPE_TRANSFER";
	case FT_QUEUE_TYPE_COUNT: return "FT_QUEUE_TYPE_COUNT";
	}
	return "";
}

FT_INLINE const char*
ft_format_to_string( const enum ft_format type )
{
	switch ( type )
	{
	case FT_FORMAT_UNDEFINED: return "FT_FORMAT_UNDEFINED";
	case FT_FORMAT_R1_UNORM: return "FT_FORMAT_R1_UNORM";
	case FT_FORMAT_R2_UNORM: return "FT_FORMAT_R2_UNORM";
	case FT_FORMAT_R4_UNORM: return "FT_FORMAT_R4_UNORM";
	case FT_FORMAT_R4G4_UNORM: return "FT_FORMAT_R4G4_UNORM";
	case FT_FORMAT_G4R4_UNORM: return "FT_FORMAT_G4R4_UNORM";
	case FT_FORMAT_A8_UNORM: return "FT_FORMAT_A8_UNORM";
	case FT_FORMAT_R8_UNORM: return "FT_FORMAT_R8_UNORM";
	case FT_FORMAT_R8_SNORM: return "FT_FORMAT_R8_SNORM";
	case FT_FORMAT_R8_UINT: return "FT_FORMAT_R8_UINT";
	case FT_FORMAT_R8_SINT: return "FT_FORMAT_R8_SINT";
	case FT_FORMAT_R8_SRGB: return "FT_FORMAT_R8_SRGB";
	case FT_FORMAT_B2G3R3_UNORM: return "FT_FORMAT_B2G3R3_UNORM";
	case FT_FORMAT_R4G4B4A4_UNORM: return "FT_FORMAT_R4G4B4A4_UNORM";
	case FT_FORMAT_R4G4B4X4_UNORM: return "FT_FORMAT_R4G4B4X4_UNORM";
	case FT_FORMAT_B4G4R4A4_UNORM: return "FT_FORMAT_B4G4R4A4_UNORM";
	case FT_FORMAT_B4G4R4X4_UNORM: return "FT_FORMAT_B4G4R4X4_UNORM";
	case FT_FORMAT_A4R4G4B4_UNORM: return "FT_FORMAT_A4R4G4B4_UNORM";
	case FT_FORMAT_X4R4G4B4_UNORM: return "FT_FORMAT_X4R4G4B4_UNORM";
	case FT_FORMAT_A4B4G4R4_UNORM: return "FT_FORMAT_A4B4G4R4_UNORM";
	case FT_FORMAT_X4B4G4R4_UNORM: return "FT_FORMAT_X4B4G4R4_UNORM";
	case FT_FORMAT_R5G6B5_UNORM: return "FT_FORMAT_R5G6B5_UNORM";
	case FT_FORMAT_B5G6R5_UNORM: return "FT_FORMAT_B5G6R5_UNORM";
	case FT_FORMAT_R5G5B5A1_UNORM: return "FT_FORMAT_R5G5B5A1_UNORM";
	case FT_FORMAT_B5G5R5A1_UNORM: return "FT_FORMAT_B5G5R5A1_UNORM";
	case FT_FORMAT_A1B5G5R5_UNORM: return "FT_FORMAT_A1B5G5R5_UNORM";
	case FT_FORMAT_A1R5G5B5_UNORM: return "FT_FORMAT_A1R5G5B5_UNORM";
	case FT_FORMAT_B5G5B5X1_UNORM: return "FT_FORMAT_B5G5B5X1_UNORM";
	case FT_FORMAT_B5G5R5X1_UNORM: return "FT_FORMAT_B5G5R5X1_UNORM";
	case FT_FORMAT_X1R5G5B5_UNORM: return "FT_FORMAT_X1R5G5B5_UNORM";
	case FT_FORMAT_X1B5G5R5_UNORM: return "FT_FORMAT_X1B5G5R5_UNORM";
	case FT_FORMAT_B2G3R3A8_UNORM: return "FT_FORMAT_B2G3R3A8_UNORM";
	case FT_FORMAT_R8G8_UNORM: return "FT_FORMAT_R8G8_UNORM";
	case FT_FORMAT_R8G8_SNORM: return "FT_FORMAT_R8G8_SNORM";
	case FT_FORMAT_G8R8_UNORM: return "FT_FORMAT_G8R8_UNORM";
	case FT_FORMAT_G8R8_SNORM: return "FT_FORMAT_G8R8_SNORM";
	case FT_FORMAT_R8G8_UINT: return "FT_FORMAT_R8G8_UINT";
	case FT_FORMAT_R8G8_SINT: return "FT_FORMAT_R8G8_SINT";
	case FT_FORMAT_R8G8_SRGB: return "FT_FORMAT_R8G8_SRGB";
	case FT_FORMAT_R16_UNORM: return "FT_FORMAT_R16_UNORM";
	case FT_FORMAT_R16_SNORM: return "FT_FORMAT_R16_SNORM";
	case FT_FORMAT_R16_UINT: return "FT_FORMAT_R16_UINT";
	case FT_FORMAT_R16_SINT: return "FT_FORMAT_R16_SINT";
	case FT_FORMAT_R16_SFLOAT: return "FT_FORMAT_R16_SFLOAT";
	case FT_FORMAT_R16_SBFLOAT: return "FT_FORMAT_R16_SBFLOAT";
	case FT_FORMAT_R8G8B8_UNORM: return "FT_FORMAT_R8G8B8_UNORM";
	case FT_FORMAT_R8G8B8_SNORM: return "FT_FORMAT_R8G8B8_SNORM";
	case FT_FORMAT_R8G8B8_UINT: return "FT_FORMAT_R8G8B8_UINT";
	case FT_FORMAT_R8G8B8_SINT: return "FT_FORMAT_R8G8B8_SINT";
	case FT_FORMAT_R8G8B8_SRGB: return "FT_FORMAT_R8G8B8_SRGB";
	case FT_FORMAT_B8G8R8_UNORM: return "FT_FORMAT_B8G8R8_UNORM";
	case FT_FORMAT_B8G8R8_SNORM: return "FT_FORMAT_B8G8R8_SNORM";
	case FT_FORMAT_B8G8R8_UINT: return "FT_FORMAT_B8G8R8_UINT";
	case FT_FORMAT_B8G8R8_SINT: return "FT_FORMAT_B8G8R8_SINT";
	case FT_FORMAT_B8G8R8_SRGB: return "FT_FORMAT_B8G8R8_SRGB";
	case FT_FORMAT_R8G8B8A8_UNORM: return "FT_FORMAT_R8G8B8A8_UNORM";
	case FT_FORMAT_R8G8B8A8_SNORM: return "FT_FORMAT_R8G8B8A8_SNORM";
	case FT_FORMAT_R8G8B8A8_UINT: return "FT_FORMAT_R8G8B8A8_UINT";
	case FT_FORMAT_R8G8B8A8_SINT: return "FT_FORMAT_R8G8B8A8_SINT";
	case FT_FORMAT_R8G8B8A8_SRGB: return "FT_FORMAT_R8G8B8A8_SRGB";
	case FT_FORMAT_B8G8R8A8_UNORM: return "FT_FORMAT_B8G8R8A8_UNORM";
	case FT_FORMAT_B8G8R8A8_SNORM: return "FT_FORMAT_B8G8R8A8_SNORM";
	case FT_FORMAT_B8G8R8A8_UINT: return "FT_FORMAT_B8G8R8A8_UINT";
	case FT_FORMAT_B8G8R8A8_SINT: return "FT_FORMAT_B8G8R8A8_SINT";
	case FT_FORMAT_B8G8R8A8_SRGB: return "FT_FORMAT_B8G8R8A8_SRGB";
	case FT_FORMAT_R8G8B8X8_UNORM: return "FT_FORMAT_R8G8B8X8_UNORM";
	case FT_FORMAT_B8G8R8X8_UNORM: return "FT_FORMAT_B8G8R8X8_UNORM";
	case FT_FORMAT_R16G16_UNORM: return "FT_FORMAT_R16G16_UNORM";
	case FT_FORMAT_G16R16_UNORM: return "FT_FORMAT_G16R16_UNORM";
	case FT_FORMAT_R16G16_SNORM: return "FT_FORMAT_R16G16_SNORM";
	case FT_FORMAT_G16R16_SNORM: return "FT_FORMAT_G16R16_SNORM";
	case FT_FORMAT_R16G16_UINT: return "FT_FORMAT_R16G16_UINT";
	case FT_FORMAT_R16G16_SINT: return "FT_FORMAT_R16G16_SINT";
	case FT_FORMAT_R16G16_SFLOAT: return "FT_FORMAT_R16G16_SFLOAT";
	case FT_FORMAT_R16G16_SBFLOAT: return "FT_FORMAT_R16G16_SBFLOAT";
	case FT_FORMAT_R32_UINT: return "FT_FORMAT_R32_UINT";
	case FT_FORMAT_R32_SINT: return "FT_FORMAT_R32_SINT";
	case FT_FORMAT_R32_SFLOAT: return "FT_FORMAT_R32_SFLOAT";
	case FT_FORMAT_A2R10G10B10_UNORM: return "FT_FORMAT_A2R10G10B10_UNORM";
	case FT_FORMAT_A2R10G10B10_UINT: return "FT_FORMAT_A2R10G10B10_UINT";
	case FT_FORMAT_A2R10G10B10_SNORM: return "FT_FORMAT_A2R10G10B10_SNORM";
	case FT_FORMAT_A2R10G10B10_SINT: return "FT_FORMAT_A2R10G10B10_SINT";
	case FT_FORMAT_A2B10G10R10_UNORM: return "FT_FORMAT_A2B10G10R10_UNORM";
	case FT_FORMAT_A2B10G10R10_UINT: return "FT_FORMAT_A2B10G10R10_UINT";
	case FT_FORMAT_A2B10G10R10_SNORM: return "FT_FORMAT_A2B10G10R10_SNORM";
	case FT_FORMAT_A2B10G10R10_SINT: return "FT_FORMAT_A2B10G10R10_SINT";
	case FT_FORMAT_R10G10B10A2_UNORM: return "FT_FORMAT_R10G10B10A2_UNORM";
	case FT_FORMAT_R10G10B10A2_UINT: return "FT_FORMAT_R10G10B10A2_UINT";
	case FT_FORMAT_R10G10B10A2_SNORM: return "FT_FORMAT_R10G10B10A2_SNORM";
	case FT_FORMAT_R10G10B10A2_SINT: return "FT_FORMAT_R10G10B10A2_SINT";
	case FT_FORMAT_B10G10R10R10A2_UNORM:
		return "FT_FORMAT_B10G10R10R10A2_UNORM";
	case FT_FORMAT_B10G10R10R10A2_UINT: return "FT_FORMAT_B10G10R10R10A2_UINT";
	case FT_FORMAT_B10G10R10R10A2_SNORM:
		return "FT_FORMAT_B10G10R10R10A2_SNORM";
	case FT_FORMAT_B10G10R10R10A2_SINT: return "FT_FORMAT_B10G10R10R10A2_SINT";
	case FT_FORMAT_B10G10R11_UFLOAT: return "FT_FORMAT_B10G10R11_UFLOAT";
	case FT_FORMAT_E5B5G9R9_UFLOAT: return "FT_FORMAT_E5B5G9R9_UFLOAT";
	case FT_FORMAT_R16G16B16_UNORM: return "FT_FORMAT_R16G16B16_UNORM";
	case FT_FORMAT_R16G16B16_SNORM: return "FT_FORMAT_R16G16B16_SNORM";
	case FT_FORMAT_R16G16B16_UINT: return "FT_FORMAT_R16G16B16_UINT";
	case FT_FORMAT_R16G16B16_SINT: return "FT_FORMAT_R16G16B16_SINT";
	case FT_FORMAT_R16G16B16_SFLOAT: return "FT_FORMAT_R16G16B16_SFLOAT";
	case FT_FORMAT_R16G16B16_SBFLOAT: return "FT_FORMAT_R16G16B16_SBFLOAT";
	case FT_FORMAT_R16G16B16A16_UNORM: return "FT_FORMAT_R16G16B16A16_UNORM";
	case FT_FORMAT_R16G16B16A16_SNORM: return "FT_FORMAT_R16G16B16A16_SNORM";
	case FT_FORMAT_R16G16B16A16_UINT: return "FT_FORMAT_R16G16B16A16_UINT";
	case FT_FORMAT_R16G16B16A16_SINT: return "FT_FORMAT_R16G16B16A16_SINT";
	case FT_FORMAT_R16G16B16A16_SFLOAT: return "FT_FORMAT_R16G16B16A16_SFLOAT";
	case FT_FORMAT_R16G16B16A16_SBFLOAT:
		return "FT_FORMAT_R16G16B16A16_SBFLOAT";
	case FT_FORMAT_R32G32_UINT: return "FT_FORMAT_R32G32_UINT";
	case FT_FORMAT_R32G32_SINT: return "FT_FORMAT_R32G32_SINT";
	case FT_FORMAT_R32G32_SFLOAT: return "FT_FORMAT_R32G32_SFLOAT";
	case FT_FORMAT_R32G32B32_UINT: return "FT_FORMAT_R32G32B32_UINT";
	case FT_FORMAT_R32G32B32_SINT: return "FT_FORMAT_R32G32B32_SINT";
	case FT_FORMAT_R32G32B32_SFLOAT: return "FT_FORMAT_R32G32B32_SFLOAT";
	case FT_FORMAT_R32G32B32A32_UINT: return "FT_FORMAT_R32G32B32A32_UINT";
	case FT_FORMAT_R32G32B32A32_SINT: return "FT_FORMAT_R32G32B32A32_SINT";
	case FT_FORMAT_R32G32B32A32_SFLOAT: return "FT_FORMAT_R32G32B32A32_SFLOAT";
	case FT_FORMAT_R64_UINT: return "FT_FORMAT_R64_UINT";
	case FT_FORMAT_R64_SINT: return "FT_FORMAT_R64_SINT";
	case FT_FORMAT_R64_SFLOAT: return "FT_FORMAT_R64_SFLOAT";
	case FT_FORMAT_R64G64_UINT: return "FT_FORMAT_R64G64_UINT";
	case FT_FORMAT_R64G64_SINT: return "FT_FORMAT_R64G64_SINT";
	case FT_FORMAT_R64G64_SFLOAT: return "FT_FORMAT_R64G64_SFLOAT";
	case FT_FORMAT_R64G64B64_UINT: return "FT_FORMAT_R64G64B64_UINT";
	case FT_FORMAT_R64G64B64_SINT: return "FT_FORMAT_R64G64B64_SINT";
	case FT_FORMAT_R64G64B64_SFLOAT: return "FT_FORMAT_R64G64B64_SFLOAT";
	case FT_FORMAT_R64G64B64A64_UINT: return "FT_FORMAT_R64G64B64A64_UINT";
	case FT_FORMAT_R64G64B64A64_SINT: return "FT_FORMAT_R64G64B64A64_SINT";
	case FT_FORMAT_R64G64B64A64_SFLOAT: return "FT_FORMAT_R64G64B64A64_SFLOAT";
	case FT_FORMAT_D16_UNORM: return "FT_FORMAT_D16_UNORM";
	case FT_FORMAT_X8D24_UNORM: return "FT_FORMAT_X8D24_UNORM";
	case FT_FORMAT_D32_SFLOAT: return "FT_FORMAT_D32_SFLOAT";
	case FT_FORMAT_S8_UINT: return "FT_FORMAT_S8_UINT";
	case FT_FORMAT_D16_UNORMS8_UINT: return "FT_FORMAT_D16_UNORMS8_UINT";
	case FT_FORMAT_D24_UNORMS8_UINT: return "FT_FORMAT_D24_UNORMS8_UINT";
	case FT_FORMAT_D32_SFLOATS8_UINT: return "FT_FORMAT_D32_SFLOATS8_UINT";
	case FT_FORMAT_DXBC1_RGB_UNORM: return "FT_FORMAT_DXBC1_RGB_UNORM";
	case FT_FORMAT_DXBC1_RGB_SRGB: return "FT_FORMAT_DXBC1_RGB_SRGB";
	case FT_FORMAT_DXBC1_RGBA_UNORM: return "FT_FORMAT_DXBC1_RGBA_UNORM";
	case FT_FORMAT_DXBC1_RGBA_SRGB: return "FT_FORMAT_DXBC1_RGBA_SRGB";
	case FT_FORMAT_DXBC2_UNORM: return "FT_FORMAT_DXBC2_UNORM";
	case FT_FORMAT_DXBC2_SRGB: return "FT_FORMAT_DXBC2_SRGB";
	case FT_FORMAT_DXBC3_UNORM: return "FT_FORMAT_DXBC3_UNORM";
	case FT_FORMAT_DXBC3_SRGB: return "FT_FORMAT_DXBC3_SRGB";
	case FT_FORMAT_DXBC4_UNORM: return "FT_FORMAT_DXBC4_UNORM";
	case FT_FORMAT_DXBC4_SNORM: return "FT_FORMAT_DXBC4_SNORM";
	case FT_FORMAT_DXBC5_UNORM: return "FT_FORMAT_DXBC5_UNORM";
	case FT_FORMAT_DXBC5_SNORM: return "FT_FORMAT_DXBC5_SNORM";
	case FT_FORMAT_DXBC6H_UFLOAT: return "FT_FORMAT_DXBC6H_UFLOAT";
	case FT_FORMAT_DXBC6H_SFLOAT: return "FT_FORMAT_DXBC6H_SFLOAT";
	case FT_FORMAT_DXBC7_UNORM: return "FT_FORMAT_DXBC7_UNORM";
	case FT_FORMAT_DXBC7_SRGB: return "FT_FORMAT_DXBC7_SRGB";
	case FT_FORMAT_PVRTC1_2BPP_UNORM: return "FT_FORMAT_PVRTC1_2BPP_UNORM";
	case FT_FORMAT_PVRTC1_4BPP_UNORM: return "FT_FORMAT_PVRTC1_4BPP_UNORM";
	case FT_FORMAT_PVRTC2_2BPP_UNORM: return "FT_FORMAT_PVRTC2_2BPP_UNORM";
	case FT_FORMAT_PVRTC2_4BPP_UNORM: return "FT_FORMAT_PVRTC2_4BPP_UNORM";
	case FT_FORMAT_PVRTC1_2BPP_SRGB: return "FT_FORMAT_PVRTC1_2BPP_SRGB";
	case FT_FORMAT_PVRTC1_4BPP_SRGB: return "FT_FORMAT_PVRTC1_4BPP_SRGB";
	case FT_FORMAT_PVRTC2_2BPP_SRGB: return "FT_FORMAT_PVRTC2_2BPP_SRGB";
	case FT_FORMAT_PVRTC2_4BPP_SRGB: return "FT_FORMAT_PVRTC2_4BPP_SRGB";
	case FT_FORMAT_ETC2_R8G8B8_UNORM: return "FT_FORMAT_ETC2_R8G8B8_UNORM";
	case FT_FORMAT_ETC2_R8G8B8_SRGB: return "FT_FORMAT_ETC2_R8G8B8_SRGB";
	case FT_FORMAT_ETC2_R8G8B8A1_UNORM: return "FT_FORMAT_ETC2_R8G8B8A1_UNORM";
	case FT_FORMAT_ETC2_R8G8B8A1_SRGB: return "FT_FORMAT_ETC2_R8G8B8A1_SRGB";
	case FT_FORMAT_ETC2_R8G8B8A8_UNORM: return "FT_FORMAT_ETC2_R8G8B8A8_UNORM";
	case FT_FORMAT_ETC2_R8G8B8A8_SRGB: return "FT_FORMAT_ETC2_R8G8B8A8_SRGB";
	case FT_FORMAT_ETC2_EAC_R11_UNORM: return "FT_FORMAT_ETC2_EAC_R11_UNORM";
	case FT_FORMAT_ETC2_EAC_R11_SNORM: return "FT_FORMAT_ETC2_EAC_R11_SNORM";
	case FT_FORMAT_ETC2_EAC_R11G11_UNORM:
		return "FT_FORMAT_ETC2_EAC_R11G11_UNORM";
	case FT_FORMAT_ETC2_EAC_R11G11_SNORM:
		return "FT_FORMAT_ETC2_EAC_R11G11_SNORM";
	case FT_FORMAT_ASTC_4x4_UNORM: return "FT_FORMAT_ASTC_4x4_UNORM";
	case FT_FORMAT_ASTC_4x4_SRGB: return "FT_FORMAT_ASTC_4x4_SRGB";
	case FT_FORMAT_ASTC_5x4_UNORM: return "FT_FORMAT_ASTC_5x4_UNORM";
	case FT_FORMAT_ASTC_5x4_SRGB: return "FT_FORMAT_ASTC_5x4_SRGB";
	case FT_FORMAT_ASTC_5x5_UNORM: return "FT_FORMAT_ASTC_5x5_UNORM";
	case FT_FORMAT_ASTC_5x5_SRGB: return "FT_FORMAT_ASTC_5x5_SRGB";
	case FT_FORMAT_ASTC_6x5_UNORM: return "FT_FORMAT_ASTC_6x5_UNORM";
	case FT_FORMAT_ASTC_6x5_SRGB: return "FT_FORMAT_ASTC_6x5_SRGB";
	case FT_FORMAT_ASTC_6x6_UNORM: return "FT_FORMAT_ASTC_6x6_UNORM";
	case FT_FORMAT_ASTC_6x6_SRGB: return "FT_FORMAT_ASTC_6x6_SRGB";
	case FT_FORMAT_ASTC_8x5_UNORM: return "FT_FORMAT_ASTC_8x5_UNORM";
	case FT_FORMAT_ASTC_8x5_SRGB: return "FT_FORMAT_ASTC_8x5_SRGB";
	case FT_FORMAT_ASTC_8x6_UNORM: return "FT_FORMAT_ASTC_8x6_UNORM";
	case FT_FORMAT_ASTC_8x6_SRGB: return "FT_FORMAT_ASTC_8x6_SRGB";
	case FT_FORMAT_ASTC_8x8_UNORM: return "FT_FORMAT_ASTC_8x8_UNORM";
	case FT_FORMAT_ASTC_8x8_SRGB: return "FT_FORMAT_ASTC_8x8_SRGB";
	case FT_FORMAT_ASTC_10x5_UNORM: return "FT_FORMAT_ASTC_10x5_UNORM";
	case FT_FORMAT_ASTC_10x5_SRGB: return "FT_FORMAT_ASTC_10x5_SRGB";
	case FT_FORMAT_ASTC_10x6_UNORM: return "FT_FORMAT_ASTC_10x6_UNORM";
	case FT_FORMAT_ASTC_10x6_SRGB: return "FT_FORMAT_ASTC_10x6_SRGB";
	case FT_FORMAT_ASTC_10x8_UNORM: return "FT_FORMAT_ASTC_10x8_UNORM";
	case FT_FORMAT_ASTC_10x8_SRGB: return "FT_FORMAT_ASTC_10x8_SRGB";
	case FT_FORMAT_ASTC_10x10_UNORM: return "FT_FORMAT_ASTC_10x10_UNORM";
	case FT_FORMAT_ASTC_10x10_SRGB: return "FT_FORMAT_ASTC_10x10_SRGB";
	case FT_FORMAT_ASTC_12x10_UNORM: return "FT_FORMAT_ASTC_12x10_UNORM";
	case FT_FORMAT_ASTC_12x10_SRGB: return "FT_FORMAT_ASTC_12x10_SRGB";
	case FT_FORMAT_ASTC_12x12_UNORM: return "FT_FORMAT_ASTC_12x12_UNORM";
	case FT_FORMAT_ASTC_12x12_SRGB: return "FT_FORMAT_ASTC_12x12_SRGB";
	case FT_FORMAT_CLUT_P4: return "FT_FORMAT_CLUT_P4";
	case FT_FORMAT_CLUT_P4A4: return "FT_FORMAT_CLUT_P4A4";
	case FT_FORMAT_CLUT_P8: return "FT_FORMAT_CLUT_P8";
	case FT_FORMAT_CLUT_P8A8: return "FT_FORMAT_CLUT_P8A8";
	}
	return "";
}

FT_INLINE const char*
ft_attachment_load_op_to_string( const enum ft_attachment_load_op type )
{
	switch ( type )
	{
	case FT_ATTACHMENT_LOAD_OP_LOAD: return "FT_ATTACHMENT_LOAD_OP_LOAD";
	case FT_ATTACHMENT_LOAD_OP_CLEAR: return "FT_ATTACHMENT_LOAD_OP_CLEAR";
	case FT_ATTACHMENT_LOAD_OP_DONT_CARE:
		return "FT_ATTACHMENT_LOAD_OP_DONT_CARE";
	}
	return "";
}

FT_INLINE const char*
ft_memory_usage_to_string( const enum ft_memory_usage type )
{
	switch ( type )
	{
	case FT_MEMORY_USAGE_GPU_ONLY: return "FT_MEMORY_USAGE_GPU_ONLY";
	case FT_MEMORY_USAGE_CPU_ONLY: return "FT_MEMORY_USAGE_CPU_ONLY";
	case FT_MEMORY_USAGE_CPU_TO_GPU: return "FT_MEMORY_USAGE_CPU_TO_GPU";
	case FT_MEMORY_USAGE_GPU_TO_CPU: return "FT_MEMORY_USAGE_GPU_TO_CPU";
	case FT_MEMORY_USAGE_CPU_COPY: return "FT_MEMORY_USAGE_CPU_COPY";
	}
	return "";
}

FT_INLINE const char*
ft_resource_state_to_string( const enum ft_resource_state type )
{
	switch ( type )
	{
	case FT_RESOURCE_STATE_UNDEFINED: return "FT_RESOURCE_STATE_UNDEFINED";
	case FT_RESOURCE_STATE_GENERAL: return "FT_RESOURCE_STATE_GENERAL";
	case FT_RESOURCE_STATE_COLOR_ATTACHMENT:
		return "FT_RESOURCE_STATE_COLOR_ATTACHMENT";
	case FT_RESOURCE_STATE_DEPTH_STENCIL_WRITE:
		return "FT_RESOURCE_STATE_DEPTH_STENCIL_WRITE";
	case FT_RESOURCE_STATE_DEPTH_STENCIL_READ_ONLY:
		return "FT_RESOURCE_STATE_DEPTH_STENCIL_READ_ONLY";
	case FT_RESOURCE_STATE_SHADER_READ_ONLY:
		return "FT_RESOURCE_STATE_SHADER_READ_ONLY";
	case FT_RESOURCE_STATE_TRANSFER_SRC:
		return "FT_RESOURCE_STATE_TRANSFER_SRC";
	case FT_RESOURCE_STATE_TRANSFER_DST:
		return "FT_RESOURCE_STATE_TRANSFER_DST";
	case FT_RESOURCE_STATE_PRESENT: return "FT_RESOURCE_STATE_PRESENT";
	}
	return "";
}

FT_INLINE const char*
ft_descriptor_type_to_string( const enum ft_descriptor_type type )
{
	switch ( type )
	{
	case FT_DESCRIPTOR_TYPE_UNDEFINED: return "FT_DESCRIPTOR_TYPE_UNDEFINED";
	case FT_DESCRIPTOR_TYPE_VERTEX_BUFFER:
		return "FT_DESCRIPTOR_TYPE_VERTEX_BUFFER";
	case FT_DESCRIPTOR_TYPE_INDEX_BUFFER:
		return "FT_DESCRIPTOR_TYPE_INDEX_BUFFER";
	case FT_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
		return "FT_DESCRIPTOR_TYPE_UNIFORM_BUFFER";
	case FT_DESCRIPTOR_TYPE_SAMPLER: return "FT_DESCRIPTOR_TYPE_SAMPLER";
	case FT_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
		return "FT_DESCRIPTOR_TYPE_SAMPLED_IMAGE";
	case FT_DESCRIPTOR_TYPE_STORAGE_IMAGE:
		return "FT_DESCRIPTOR_TYPE_STORAGE_IMAGE";
	case FT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
		return "FT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER";
	case FT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
		return "FT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER";
	case FT_DESCRIPTOR_TYPE_STORAGE_BUFFER:
		return "FT_DESCRIPTOR_TYPE_STORAGE_BUFFER";
	case FT_DESCRIPTOR_TYPE_INDIRECT_BUFFER:
		return "FT_DESCRIPTOR_TYPE_INDIRECT_BUFFER";
	case FT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
		return "FT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC";
	case FT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
		return "FT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC";
	case FT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
		return "FT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT";
	case FT_DESCRIPTOR_TYPE_DEPTH_STENCIL_ATTACHMENT:
		return "FT_DESCRIPTOR_TYPE_DEPTH_STENCIL_ATTACHMENT";
	case FT_DESCRIPTOR_TYPE_COLOR_ATTACHMENT:
		return "FT_DESCRIPTOR_TYPE_COLOR_ATTACHMENT";
	case FT_DESCRIPTOR_TYPE_TRANSIENT_ATTACHMENT:
		return "FT_DESCRIPTOR_TYPE_TRANSIENT_ATTACHMENT";
	}
	return "";
}

FT_INLINE const char*
ft_pipeline_type_to_string( const enum ft_pipeline_type type )
{
	switch ( type )
	{
	case FT_PIPELINE_TYPE_COMPUTE: return "FT_PIPELINE_TYPE_COMPUTE";
	case FT_PIPELINE_TYPE_GRAPHICS: return "FT_PIPELINE_TYPE_GRAPHICS";
	}
	return "";
}

FT_INLINE const char*
ft_vertex_input_rate_to_string( const enum ft_vertex_input_rate type )
{
	switch ( type )
	{
	case FT_VERTEX_INPUT_RATE_VERTEX: return "FT_VERTEX_INPUT_RATE_VERTEX";
	case FT_VERTEX_INPUT_RATE_INSTANCE: return "FT_VERTEX_INPUT_RATE_INSTANCE";
	}
	return "";
}

FT_INLINE const char*
ft_index_type_to_string( const enum ft_index_type type )
{
	switch ( type )
	{
	case FT_INDEX_TYPE_U16: return "FT_INDEX_TYPE_U16";
	case FT_INDEX_TYPE_U32: return "FT_INDEX_TYPE_U32";
	}
	return "";
}

FT_INLINE const char*
ft_front_face_to_string( const enum ft_front_face type )
{
	switch ( type )
	{
	case FT_FRONT_FACE_CLOCKWISE: return "FT_FRONT_FACE_CLOCKWISE";
	case FT_FRONT_FACE_COUNTER_CLOCKWISE:
		return "FT_FRONT_FACE_COUNTER_CLOCKWISE";
	}
	return "";
}

FT_INLINE const char*
ft_polygon_mode_to_string( const enum ft_polygon_mode type )
{
	switch ( type )
	{
	case FT_POLYGON_MODE_FILL: return "FT_POLYGON_MODE_FILL";
	case FT_POLYGON_MODE_LINE: return "FT_POLYGON_MODE_LINE";
	}
	return "";
}

FT_INLINE const char*
ft_sampler_mipmap_mode_to_string( const enum ft_sampler_mipmap_mode type )
{
	switch ( type )
	{
	case FT_SAMPLER_MIPMAP_MODE_NEAREST:
		return "FT_SAMPLER_MIPMAP_MODE_NEAREST";
	case FT_SAMPLER_MIPMAP_MODE_LINEAR: return "FT_SAMPLER_MIPMAP_MODE_LINEAR";
	}
	return "";
}

FT_INLINE const char*
ft_sampler_address_mode_to_string( const enum ft_sampler_address_mode type )
{
	switch ( type )
	{
	case FT_SAMPLER_ADDRESS_MODE_REPEAT:
		return "FT_SAMPLER_ADDRESS_MODE_REPEAT";
	case FT_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
		return "FT_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT";
	case FT_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
		return "FT_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE";
	case FT_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
		return "FT_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER";
	}
	return "";
}

FT_INLINE const char*
ft_compare_op_to_string( const enum ft_compare_op type )
{
	switch ( type )
	{
	case FT_COMPARE_OP_NEVER: return "FT_COMPARE_OP_NEVER";
	case FT_COMPARE_OP_LESS: return "FT_COMPARE_OP_LESS";
	case FT_COMPARE_OP_EQUAL: return "FT_COMPARE_OP_EQUAL";
	case FT_COMPARE_OP_LESS_OR_EQUAL: return "FT_COMPARE_OP_LESS_OR_EQUAL";
	case FT_COMPARE_OP_GREATER: return "FT_COMPARE_OP_GREATER";
	case FT_COMPARE_OP_NOT_EQUAL: return "FT_COMPARE_OP_NOT_EQUAL";
	case FT_COMPARE_OP_GREATER_OR_EQUAL:
		return "FT_COMPARE_OP_GREATER_OR_EQUAL";
	case FT_COMPARE_OP_ALWAYS: return "FT_COMPARE_OP_ALWAYS";
	}
	return "";
}

FT_INLINE const char*
ft_cull_mode_to_string( const enum ft_cull_mode type )
{
	switch ( type )
	{
	case FT_CULL_MODE_NONE: return "FT_CULL_MODE_NONE";
	case FT_CULL_MODE_FRONT: return "FT_CULL_MODE_FRONT";
	case FT_CULL_MODE_BACK: return "FT_CULL_MODE_BACK";
	}
	return "";
}

FT_INLINE const char*
ft_shader_stage_to_string( const enum ft_shader_stage type )
{
	switch ( type )
	{
	case FT_SHADER_STAGE_VERTEX: return "FT_SHADER_STAGE_VERTEX";
	case FT_SHADER_STAGE_TESSELLATION_CONTROL:
		return "FT_SHADER_STAGE_TESSELLATION_CONTROL";
	case FT_SHADER_STAGE_TESSELLATION_EVALUATION:
		return "FT_SHADER_STAGE_TESSELLATION_EVALUATION";
	case FT_SHADER_STAGE_GEOMETRY: return "FT_SHADER_STAGE_GEOMETRY";
	case FT_SHADER_STAGE_FRAGMENT: return "FT_SHADER_STAGE_FRAGMENT";
	case FT_SHADER_STAGE_COMPUTE: return "FT_SHADER_STAGE_COMPUTE";
	case FT_SHADER_STAGE_COUNT: return "FT_SHADER_STAGE_COUNT";
	}
	return "";
}

FT_INLINE const char*
ft_filter_to_string( const enum ft_filter type )
{
	switch ( type )
	{
	case FT_FILTER_NEAREST: return "FT_FILTER_NEAREST";
	case FT_FILTER_LINEAR: return "FT_FILTER_LINEAR";
	}
	return "";
}

FT_INLINE const char*
ft_primitive_topology_to_string( const enum ft_primitive_topology type )
{
	switch ( type )
	{
	case FT_PRIMITIVE_TOPOLOGY_POINT_LIST:
		return "FT_PRIMITIVE_TOPOLOGY_POINT_LIST";
	case FT_PRIMITIVE_TOPOLOGY_LINE_LIST:
		return "FT_PRIMITIVE_TOPOLOGY_LINE_LIST";
	case FT_PRIMITIVE_TOPOLOGY_LINE_STRIP:
		return "FT_PRIMITIVE_TOPOLOGY_LINE_STRIP";
	case FT_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:
		return "FT_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
	case FT_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
		return "FT_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
	}
	return "";
}

FT_INLINE const char*
ft_blend_factor_to_string( const enum ft_blend_factor type )
{
	switch ( type )
	{
	case FT_BLEND_FACTOR_ZERO: return "FT_BLEND_FACTOR_ZERO";
	case FT_BLEND_FACTOR_ONE: return "FT_BLEND_FACTOR_ONE";
	case FT_BLEND_FACTOR_SRC_COLOR: return "FT_BLEND_FACTOR_SRC_COLOR";
	case FT_BLEND_FACTOR_ONE_MINUS_SRC_COLOR:
		return "FT_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
	case FT_BLEND_FACTOR_DST_COLOR: return "FT_BLEND_FACTOR_DST_COLOR";
	case FT_BLEND_FACTOR_ONE_MINUS_DST_COLOR:
		return "FT_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
	case FT_BLEND_FACTOR_SRC_ALPHA: return "FT_BLEND_FACTOR_SRC_ALPHA";
	case FT_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:
		return "FT_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
	case FT_BLEND_FACTOR_DST_ALPHA: return "FT_BLEND_FACTOR_DST_ALPHA";
	case FT_BLEND_FACTOR_ONE_MINUS_DST_ALPHA:
		return "FT_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
	case FT_BLEND_FACTOR_SRC_ALPHA_SATURATE:
		return "FT_BLEND_FACTOR_SRC_ALPHA_SATURATE";
	}
	return "";
}

FT_INLINE const char*
ft_blend_op_to_string( const enum ft_blend_op type )
{
	switch ( type )
	{
	case FT_BLEND_OP_ADD: return "FT_BLEND_OP_ADD";
	case FT_BLEND_OP_SUBTRACT: return "FT_BLEND_OP_SUBTRACT";
	case FT_BLEND_OP_REVERSE_SUBTRACT: return "FT_BLEND_OP_REVERSE_SUBTRACT";
	case FT_BLEND_OP_MIN: return "FT_BLEND_OP_MIN";
	case FT_BLEND_OP_MAX: return "FT_BLEND_OP_MAX";
	}
	return "";
}
